{"ast":null,"code":"export function distance(latitude_1, latitude_2, longitude_1, longitude_2) {\n  longitude_1 = longitude_1 * Math.PI / 180;\n  longitude_2 = longitude_2 * Math.PI / 180;\n  latitude_1 = latitude_1 * Math.PI / 180;\n  latitude_2 = latitude_2 * Math.PI / 180;\n  var dlon = longitude_2 - longitude_1;\n  var dlat = latitude_2 - latitude_1;\n  var a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(latitude_1) * Math.cos(latitude_2) * Math.pow(Math.sin(dlon / 2), 2);\n  var c = 2 * Math.asin(Math.sqrt(a));\n  var r = 6371;\n  var final = c * r;\n  final = final.toFixed(2);\n  return final;\n}","map":{"version":3,"sources":["C:/Users/yajur/Desktop/ToHacks/TOHacks/assets/distance.js"],"names":["distance","latitude_1","latitude_2","longitude_1","longitude_2","Math","PI","dlon","dlat","a","pow","sin","cos","c","asin","sqrt","r","final","toFixed"],"mappings":"AACA,OAAO,SAASA,QAAT,CAAkBC,UAAlB,EAA6BC,UAA7B,EAAwCC,WAAxC,EAAoDC,WAApD,EACH;AACID,EAAAA,WAAW,GAAIA,WAAW,GAAGE,IAAI,CAACC,EAAnB,GAAwB,GAAvC;AACAF,EAAAA,WAAW,GAAGA,WAAW,GAAGC,IAAI,CAACC,EAAnB,GAAwB,GAAtC;AACAL,EAAAA,UAAU,GAAGA,UAAU,GAAGI,IAAI,CAACC,EAAlB,GAAuB,GAApC;AACAJ,EAAAA,UAAU,GAAGA,UAAU,GAAGG,IAAI,CAACC,EAAlB,GAAuB,GAApC;AAGA,MAAIC,IAAI,GAAGH,WAAW,GAAGD,WAAzB;AACA,MAAIK,IAAI,GAAGN,UAAU,GAAGD,UAAxB;AACA,MAAIQ,CAAC,GAAGJ,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAASH,IAAI,GAAG,CAAhB,CAAT,EAA6B,CAA7B,IAAkCH,IAAI,CAACO,GAAL,CAASX,UAAT,IAAuBI,IAAI,CAACO,GAAL,CAASV,UAAT,CAAvB,GAA8CG,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAASJ,IAAI,GAAG,CAAhB,CAAT,EAA4B,CAA5B,CAAxF;AACA,MAAIM,CAAC,GAAG,IAAIR,IAAI,CAACS,IAAL,CAAUT,IAAI,CAACU,IAAL,CAAUN,CAAV,CAAV,CAAZ;AACA,MAAIO,CAAC,GAAG,IAAR;AAEA,MAAIC,KAAK,GAAGJ,CAAC,GAAGG,CAAhB;AACAC,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAR;AACA,SAAOD,KAAP;AACH","sourcesContent":["\r\nexport function distance(latitude_1,latitude_2,longitude_1,longitude_2)\r\n    {\r\n        longitude_1 =  longitude_1 * Math.PI / 180;\r\n        longitude_2 = longitude_2 * Math.PI / 180;\r\n        latitude_1 = latitude_1 * Math.PI / 180;\r\n        latitude_2 = latitude_2 * Math.PI / 180;\r\n   \r\n        // Haversine formula\r\n        let dlon = longitude_2 - longitude_1;\r\n        let dlat = latitude_2 - latitude_1;\r\n        let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(latitude_1) * Math.cos(latitude_2) * Math.pow(Math.sin(dlon / 2),2);  \r\n        let c = 2 * Math.asin(Math.sqrt(a));\r\n        let r = 6371;\r\n        \r\n        let final = c * r;\r\n        final = final.toFixed(2)\r\n        return(final);\r\n    }"]},"metadata":{},"sourceType":"module"}